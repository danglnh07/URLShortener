// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: visitor.sql

package db

import (
	"context"
	"time"
)

const createVisitor = `-- name: CreateVisitor :one
INSERT INTO visitor(ip, url_id)
VALUES ($1, $2)
RETURNING ip, url_id, time_visited
`

type CreateVisitorParams struct {
	Ip    string `json:"ip"`
	UrlID int64  `json:"url_id"`
}

func (q *Queries) CreateVisitor(ctx context.Context, arg CreateVisitorParams) (Visitor, error) {
	row := q.db.QueryRowContext(ctx, createVisitor, arg.Ip, arg.UrlID)
	var i Visitor
	err := row.Scan(&i.Ip, &i.UrlID, &i.TimeVisited)
	return i, err
}

const deleteVisitor = `-- name: DeleteVisitor :exec
DELETE FROM visitor WHERE ip = $1 AND url_id = $2 AND time_visited = $3
`

type DeleteVisitorParams struct {
	Ip          string    `json:"ip"`
	UrlID       int64     `json:"url_id"`
	TimeVisited time.Time `json:"time_visited"`
}

func (q *Queries) DeleteVisitor(ctx context.Context, arg DeleteVisitorParams) error {
	_, err := q.db.ExecContext(ctx, deleteVisitor, arg.Ip, arg.UrlID, arg.TimeVisited)
	return err
}

const listVisitor = `-- name: ListVisitor :many
SELECT v.ip, v.time_visited, v.url_id, u.original_url FROM visitor v
JOIN url u ON u.id = v.url_id
WHERE url_id = $1
OFFSET $2
LIMIT $3
`

type ListVisitorParams struct {
	UrlID  int64 `json:"url_id"`
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type ListVisitorRow struct {
	Ip          string    `json:"ip"`
	TimeVisited time.Time `json:"time_visited"`
	UrlID       int64     `json:"url_id"`
	OriginalUrl string    `json:"original_url"`
}

func (q *Queries) ListVisitor(ctx context.Context, arg ListVisitorParams) ([]ListVisitorRow, error) {
	rows, err := q.db.QueryContext(ctx, listVisitor, arg.UrlID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListVisitorRow{}
	for rows.Next() {
		var i ListVisitorRow
		if err := rows.Scan(
			&i.Ip,
			&i.TimeVisited,
			&i.UrlID,
			&i.OriginalUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
